{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vwQk67L00kPo"
      },
      "source": [
        "# Comprehensive Guide to Classification Algorithms in Machine Learning\n",
        "\n",
        "## Introduction\n",
        "This notebook provides a detailed guide to several machine learning classification algorithms. We will cover both the theory behind these algorithms and their practical implementation. We will also compare their performance on the `breast cancer` dataset from scikit-learn, which includes features of the breast mass and labels indicating the presence of breast cancer."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "ZdVVyGYc0kPq"
      },
      "outputs": [],
      "source": [
        "# Importing necessary libraries\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn import datasets\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
        "\n",
        "from sklearn.metrics import accuracy_score"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "k7Vl6Nxi0kPq"
      },
      "outputs": [],
      "source": [
        "# Load the dataset\n",
        "data = datasets.load_breast_cancer()\n",
        "X = data.data\n",
        "y = data.target\n",
        "\n",
        "# Data preprocessing\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1. Logistic Regression"
      ],
      "metadata": {
        "id": "aqomzY3h0pUr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Logistic Regression** is a **supervised machine learning algorithm** used for **binary classification tasks**. It predicts the probability that a given input belongs to one of two classes (e.g., Class 0 or Class 1).\n",
        "\n",
        "---\n",
        "\n",
        "#### Key Characteristics\n",
        "\n",
        "1. **Output**:\n",
        "   - Outputs probabilities between 0 and 1 using the sigmoid function.\n",
        "   - Converts probabilities into class labels using a threshold (e.g., \\( > 0.5 \\) predicts Class 1).\n",
        "\n",
        "2. **Core Idea**:\n",
        "   - Applies a linear model:\n",
        "  $$\n",
        "  z = w^T x + b\n",
        "  $$\n",
        "     Where:\n",
        "     - \\( z \\): Linear combination of weights (\\( w \\)), input features (\\( x \\)), and bias (\\( b \\)).\n",
        "   - Maps \\( z \\) into a probability using the sigmoid function:\n",
        "  $$\n",
        "  \\hat{y} = \\frac{1}{1 + e^{-z}}\n",
        "  $$\n",
        "\n",
        "3. **Loss Function**:\n",
        "   - Minimizes the **log loss (cross-entropy loss)**, which measures the difference between predicted probabilities and actual labels.\n",
        "\n",
        "4. **Applications**:\n",
        "   - Spam detection (Spam or Not Spam).\n",
        "   - Medical diagnosis (Disease or No Disease).\n",
        "   - Customer churn prediction (Churn or Retain).\n",
        "\n",
        "---\n",
        "\n",
        "#### Why Use Logistic Regression?\n",
        "\n",
        "- **Simple and Efficient**: Easy to implement and computationally inexpensive.\n",
        "- **Interpretable**: Outputs probabilities, making results interpretable.\n",
        "- **Effective**: Performs well for linearly separable data.\n",
        "\n",
        "While logistic regression is primarily used for binary classification, it can be extended to multiclass problems using techniques like **one-vs-rest** or **softmax regression**.\n"
      ],
      "metadata": {
        "id": "2eJbG4rU3bK-"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r9M21cLO0kPr",
        "outputId": "ef511b39-395c-4b50-d1c7-bc6af1a071fe"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logistic Regression accuracy: 0.97\n"
          ]
        }
      ],
      "source": [
        "log_reg = LogisticRegression()\n",
        "\n",
        "log_reg.fit(X_train, y_train)\n",
        "\n",
        "log_reg_pred = log_reg.predict(X_test)\n",
        "\n",
        "log_reg_accuracy = accuracy_score(y_test, log_reg_pred)\n",
        "print(f'Logistic Regression accuracy: {log_reg_accuracy:.2f}')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2. K-Nearest Neighbours"
      ],
      "metadata": {
        "id": "pU_dlRNq0s6V"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**K-Nearest Neighbors (KNN)** is a **supervised machine learning algorithm** used for **classification** and **regression** tasks. It is a simple, non-parametric method that makes predictions based on the similarity of a data point to its nearest neighbors in the feature space.\n",
        "\n",
        "---\n",
        "\n",
        "#### Key Characteristics\n",
        "\n",
        "1. **How It Works**:\n",
        "   - The algorithm calculates the **distance** (e.g., Euclidean, Manhattan) between the new data point and all points in the training dataset.\n",
        "   - It identifies the \\( k \\) nearest neighbors (data points closest to the new point).\n",
        "   - For **classification**:\n",
        "     - Predicts the majority class among the \\( k \\) neighbors.\n",
        "   - For **regression**:\n",
        "     - Predicts the average (or weighted average) of the values of the \\( k \\) neighbors.\n",
        "\n",
        "2. **Distance Metrics**:\n",
        "   - Common metrics include:\n",
        "     - **Euclidean Distance**:\n",
        "  $$\n",
        "  d(x, y) = \\sqrt\\sum_{i=1}^{n} (x_i - y_i)^2\n",
        "  $$\n",
        "     - **Manhattan Distance**:\n",
        "  $$\n",
        "  d(x, y) = \\sum_{i=1}^{n} |x_i - y_i|\n",
        "  $$\n",
        "     - Other metrics can be used depending on the data and application.\n",
        "\n",
        "3. **Key Parameter**:\n",
        "   - The number of neighbors (\\( k \\)):\n",
        "     - A small \\( k \\) may lead to overfitting.\n",
        "     - A large \\( k \\) smooths predictions but might ignore local patterns.\n",
        "\n",
        "4. **Applications**:\n",
        "   - Handwritten digit recognition (e.g., MNIST dataset).\n",
        "   - Recommender systems.\n",
        "   - Medical diagnosis.\n",
        "\n",
        "---\n",
        "\n",
        "#### Why Use KNN?\n",
        "\n",
        "- **Simple and Intuitive**: Easy to understand and implement.\n",
        "- **Versatile**: Can handle both classification and regression tasks.\n",
        "- **No Training Phase**: KNN is a **lazy learner**, meaning it doesn't build a model during training and makes predictions at runtime.\n",
        "\n",
        "---\n",
        "\n",
        "#### Limitations of KNN\n",
        "\n",
        "- **Computationally Expensive**:\n",
        "  - Requires computing the distance to all training points for every prediction.\n",
        "- **Sensitive to Data Scaling**:\n",
        "  - Features with large ranges dominate the distance metric. Scaling (e.g., standardization) is essential.\n",
        "- **Sensitive to Noise**:\n",
        "  - Outliers and irrelevant features can significantly affect predictions.\n",
        "\n",
        "---\n",
        "\n",
        "#### Summary\n",
        "\n",
        "KNN is a powerful and easy-to-implement algorithm for supervised learning tasks. It relies on the principle of similarity and works well for smaller datasets with clearly separable classes. However, it requires careful choice of \\( k \\), proper feature scaling, and efficient handling of large datasets to perform optimally.\n"
      ],
      "metadata": {
        "id": "4si8qbJr4gkt"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cjLkpSQ50kPr",
        "outputId": "db39d0e2-0ad5-49bd-8c34-fe08ff56a3f3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "k-NN accuracy: 0.95\n"
          ]
        }
      ],
      "source": [
        "knn = KNeighborsClassifier(n_neighbors=5)\n",
        "\n",
        "knn.fit(X_train, y_train)\n",
        "\n",
        "knn_pred = knn.predict(X_test)\n",
        "\n",
        "knn_accuracy = accuracy_score(y_test, knn_pred)\n",
        "print(f'k-NN accuracy: {knn_accuracy:.2f}')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 3. Support Vector Machine"
      ],
      "metadata": {
        "id": "xrTcycsi02Wx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Support Vector Machine (SVM)** is a **supervised machine learning algorithm** used for **classification** and **regression** tasks. It works by finding the optimal hyperplane that best separates the data into different classes.\n",
        "\n",
        "---\n",
        "\n",
        "#### Key Characteristics\n",
        "\n",
        "1. **Core Idea**:\n",
        "   - SVM aims to find a **decision boundary** (hyperplane) that maximizes the margin between two classes.\n",
        "   - The **margin** is the distance between the hyperplane and the closest data points (called **support vectors**).\n",
        "\n",
        "2. **Mathematical Formulation**:\n",
        "   - The hyperplane is represented as:\n",
        "  $$\n",
        "  w^T x + b = 0\n",
        "  $$\n",
        "     Where:\n",
        "     - \\( w \\): Weight vector.\n",
        "     - \\( x \\): Input features.\n",
        "     - \\( b \\): Bias term.\n",
        "   - For binary classification:\n",
        "     - Class 1: \\( w^T x + b > 0 \\)\n",
        "     - Class 0: \\( w^T x + b < 0 \\)\n",
        "\n",
        "3. **Kernel Trick**:\n",
        "   - SVM can handle non-linear data by using the **kernel trick**, which transforms the data into a higher-dimensional space where a linear hyperplane can separate the classes.\n",
        "   - Common kernels:\n",
        "     - **Linear Kernel**: \\( K(x, y) = x^T y \\)\n",
        "     - **Polynomial Kernel**: \\( K(x, y) = (x^T y + c)^d \\)\n",
        "     - **Radial Basis Function (RBF) Kernel**: \\( K(x, y) = \\exp(-\\gamma ||x - y||^2) \\)\n",
        "\n",
        "4. **Soft Margin**:\n",
        "   - For datasets that are not perfectly separable, SVM introduces a **slack variable** to allow some misclassifications while still maximizing the margin.\n",
        "\n",
        "---\n",
        "\n",
        "#### Applications of SVM\n",
        "\n",
        "- Text classification (e.g., spam detection).\n",
        "- Image recognition.\n",
        "- Bioinformatics (e.g., cancer detection).\n",
        "- Fraud detection.\n",
        "\n",
        "---\n",
        "\n",
        "#### Why Use SVM?\n",
        "\n",
        "- **Effective for High-Dimensional Data**:\n",
        "  - Works well for datasets with many features.\n",
        "- **Robust to Overfitting**:\n",
        "  - Especially effective in cases with a clear margin of separation.\n",
        "- **Flexible with Kernels**:\n",
        "  - Can handle both linear and non-linear data using kernel functions.\n",
        "\n",
        "---\n",
        "\n",
        "#### Limitations of SVM\n",
        "\n",
        "- **Computational Complexity**:\n",
        "  - Training can be slow for large datasets.\n",
        "- **Not Ideal for Large Datasets**:\n",
        "  - Performance decreases with large numbers of samples.\n",
        "- **Choice of Hyperparameters**:\n",
        "  - Sensitive to the choice of kernel, \\( C \\) (regularization), and \\( \\gamma \\) (for RBF kernel).\n",
        "- **Not Probabilistic**:\n",
        "  - Unlike logistic regression, SVM does not directly provide probabilities but can be paired with methods like Platt Scaling.\n",
        "\n",
        "---\n",
        "\n",
        "#### Summary\n",
        "\n",
        "SVM is a powerful algorithm for classification and regression, especially when the dataset is small or medium-sized with clearly defined classes. Its ability to handle non-linear data through kernels makes it versatile. However, it requires careful tuning of hyperparameters and may not be the best choice for very large datasets.\n"
      ],
      "metadata": {
        "id": "gdWPtDGt6Pma"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oIXGDkFX0kPr",
        "outputId": "cecf20fe-a63c-404c-b74a-5b59992c4b72"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SVM accuracy: 0.96\n"
          ]
        }
      ],
      "source": [
        "svm = SVC(kernel='linear')\n",
        "\n",
        "svm.fit(X_train, y_train)\n",
        "\n",
        "svm_pred = svm.predict(X_test)\n",
        "\n",
        "svm_accuracy = accuracy_score(y_test, svm_pred)\n",
        "print(f'SVM accuracy: {svm_accuracy:.2f}')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 4. Decision Tree"
      ],
      "metadata": {
        "id": "N_tgqaQd0-LU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**classification** and **regression** tasks. They work by splitting the dataset into subsets based on feature values, forming a tree-like structure where each internal node represents a decision based on a feature, and each leaf node represents an outcome.\n",
        "\n",
        "---\n",
        "\n",
        "#### Key Characteristics\n",
        "\n",
        "1. **How It Works**:\n",
        "   - The algorithm splits data at each node by selecting the feature that provides the best separation based on a specific metric.\n",
        "   - The process continues recursively until:\n",
        "     - All data points in a node belong to the same class (for classification).\n",
        "     - A stopping criterion (e.g., maximum depth) is reached.\n",
        "\n",
        "2. **Splitting Criteria**:\n",
        "   - For **classification**:\n",
        "     - **Gini Impurity**:\n",
        "       $$\n",
        "       G = 1 - \\sum_{i=1}^k p_i^2\n",
        "       $$\n",
        "     - **Entropy**:\n",
        "       $$\n",
        "       H = - \\sum_{i=1}^k p_i \\log_2(p_i)\n",
        "       $$\n",
        "     - These measure how \"pure\" a node is (i.e., how mixed the classes are).\n",
        "   - For **regression**:\n",
        "     - **Mean Squared Error (MSE)** or **Mean Absolute Error (MAE)** is used.\n",
        "\n",
        "3. **Prediction**:\n",
        "   - For **classification**: Assigns the majority class in a leaf node.\n",
        "   - For **regression**: Computes the average of target values in a leaf node.\n",
        "\n",
        "4. **Tree Pruning**:\n",
        "   - Reduces overfitting by removing branches that provide little to no additional value.\n",
        "   - Common methods include **pre-pruning** (stopping early) and **post-pruning** (removing branches after full growth).\n",
        "\n",
        "---\n",
        "\n",
        "#### Applications of Decision Trees\n",
        "\n",
        "- Customer segmentation.\n",
        "- Fraud detection.\n",
        "- Loan approval.\n",
        "- Medical diagnosis.\n",
        "\n",
        "---\n",
        "\n",
        "#### Why Use Decision Trees?\n",
        "\n",
        "- **Simple and Interpretable**:\n",
        "  - Easy to visualize and understand.\n",
        "- **Non-Parametric**:\n",
        "  - No assumptions about the data distribution.\n",
        "- **Handles Non-Linear Relationships**:\n",
        "  - Can model complex interactions between features.\n",
        "- **Feature Importance**:\n",
        "  - Provides insights into the most important features.\n",
        "\n",
        "---\n",
        "\n",
        "#### Limitations of Decision Trees\n",
        "\n",
        "- **Prone to Overfitting**:\n",
        "  - Fully grown trees can overfit the training data, especially with noisy datasets.\n",
        "- **Sensitive to Small Changes**:\n",
        "  - A small change in the data can result in a completely different tree.\n",
        "- **Bias Toward Features with Many Values**:\n",
        "  - Features with more unique values may dominate the splits.\n",
        "\n",
        "---\n",
        "\n",
        "#### Summary\n",
        "\n",
        "Decision Trees are a versatile and interpretable algorithm that can handle both classification and regression tasks. While they are easy to implement and visualize, care must be taken to prevent overfitting by using techniques like pruning or ensemble methods (e.g., Random Forests). They work well for datasets with complex feature interactions and non-linear relationships.\n"
      ],
      "metadata": {
        "id": "oMfMqXCo7B4J"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ewPPKjvR0kPr",
        "outputId": "9350b13f-46f3-455d-81fb-1eece714d8bb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Decision Tree accuracy: 0.95\n"
          ]
        }
      ],
      "source": [
        "tree = DecisionTreeClassifier(random_state=42)\n",
        "\n",
        "tree.fit(X_train, y_train)\n",
        "\n",
        "tree_pred = tree.predict(X_test)\n",
        "\n",
        "tree_accuracy = accuracy_score(y_test, tree_pred)\n",
        "print(f'Decision Tree accuracy: {tree_accuracy:.2f}')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 5. Random Forest"
      ],
      "metadata": {
        "id": "CvqZPHKI1ACT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Random Forest** is a **supervised machine learning algorithm** used for both **classification** and **regression** tasks. It builds multiple decision trees during training and combines their outputs (using averaging for regression or voting for classification) to improve accuracy and reduce overfitting.\n",
        "\n",
        "---\n",
        "\n",
        "#### Key Characteristics\n",
        "\n",
        "1. **How It Works**:\n",
        "   - Creates multiple decision trees (an ensemble) using a technique called **bagging** (Bootstrap Aggregating).\n",
        "   - Each tree is trained on a random subset of the data (with replacement) and uses a random subset of features for splitting at each node.\n",
        "   - The final prediction:\n",
        "     - **Classification**: Majority vote among the trees.\n",
        "     - **Regression**: Average of the predictions from all trees.\n",
        "\n",
        "2. **Why Randomization?**:\n",
        "   - By using random subsets of data and features, Random Forest reduces the correlation between individual trees, resulting in a more robust model.\n",
        "\n",
        "3. **Key Hyperparameters**:\n",
        "   - **Number of Trees (\\( n\\_estimators \\))**:\n",
        "     - More trees typically improve performance but increase computational cost.\n",
        "   - **Max Features (\\( \\text{max\\_features} \\))**:\n",
        "     - Controls the number of features considered for splitting at each node.\n",
        "   - **Max Depth (\\( \\text{max\\_depth} \\))**:\n",
        "     - Limits the depth of each tree to prevent overfitting.\n",
        "   - **Min Samples Split** and **Min Samples Leaf**:\n",
        "     - Specifies the minimum number of samples required for a split or leaf node.\n",
        "\n",
        "---\n",
        "\n",
        "#### Applications of Random Forest\n",
        "\n",
        "- Customer segmentation.\n",
        "- Fraud detection.\n",
        "- Predictive maintenance.\n",
        "- Medical diagnosis (e.g., disease prediction).\n",
        "\n",
        "---\n",
        "\n",
        "#### Why Use Random Forest?\n",
        "\n",
        "- **High Accuracy**:\n",
        "  - Combines multiple trees to improve prediction performance.\n",
        "- **Robust to Overfitting**:\n",
        "  - Randomization and averaging reduce the risk of overfitting compared to a single decision tree.\n",
        "- **Handles Missing Data**:\n",
        "  - Can handle missing values by using surrogate splits or ignoring certain features.\n",
        "- **Feature Importance**:\n",
        "  - Provides a ranking of feature importance, helping in feature selection.\n",
        "\n",
        "---\n",
        "\n",
        "#### Limitations of Random Forest\n",
        "\n",
        "- **Computationally Intensive**:\n",
        "  - Training and predicting with many trees can be slow for large datasets.\n",
        "- **Less Interpretable**:\n",
        "  - The ensemble nature makes it harder to interpret than a single decision tree.\n",
        "- **Requires Tuning**:\n",
        "  - Hyperparameter tuning (e.g., number of trees, maximum depth) is needed for optimal performance.\n",
        "\n",
        "---\n",
        "\n",
        "#### Summary\n",
        "\n",
        "Random Forest is a powerful and flexible algorithm that leverages the strengths of decision trees while mitigating their weaknesses, such as overfitting. It is suitable for both classification and regression tasks, performs well with large datasets, and is robust to noise. However, it requires more computational resources and careful tuning to achieve the best results.\n"
      ],
      "metadata": {
        "id": "wt_jUudy70Cm"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aOSXhQp10kPr",
        "outputId": "622a58d9-b36e-463e-9380-bce7bd0d376c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Forest accuracy: 0.96\n"
          ]
        }
      ],
      "source": [
        "forest = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "\n",
        "forest.fit(X_train, y_train)\n",
        "\n",
        "forest_pred = forest.predict(X_test)\n",
        "\n",
        "forest_accuracy = accuracy_score(y_test, forest_pred)\n",
        "print(f'Random Forest accuracy: {forest_accuracy:.2f}')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 6. Gradient Boosting"
      ],
      "metadata": {
        "id": "Sm8SFCCA1CSV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Gradient Boosting** is a **supervised machine learning algorithm** used for **classification** and **regression** tasks. It builds an ensemble of weak learners (typically decision trees) in a sequential manner, where each tree corrects the errors of the previous one by minimizing a specific loss function.\n",
        "\n",
        "---\n",
        "\n",
        "#### Key Characteristics\n",
        "\n",
        "1. **How It Works**:\n",
        "   - Starts with an initial prediction (e.g., mean for regression or uniform probabilities for classification).\n",
        "   - At each step, a new decision tree is trained to predict the **residuals** (errors) from the previous predictions.\n",
        "   - The predictions from all trees are combined (weighted sum) to make the final prediction.\n",
        "\n",
        "2. **Loss Function**:\n",
        "   - Gradient Boosting minimizes a **loss function** by iteratively fitting trees to the gradient of the loss.\n",
        "   - Common loss functions:\n",
        "     - **Regression**: Mean Squared Error (MSE).\n",
        "     - **Classification**: Log Loss (Cross-Entropy).\n",
        "\n",
        "3. **Learning Rate (\\( \\eta \\))**:\n",
        "   - Controls the contribution of each tree to the final prediction.\n",
        "   - Smaller learning rates improve accuracy but require more trees.\n",
        "\n",
        "4. **Tree Depth**:\n",
        "   - Gradient Boosting uses shallow trees (weak learners) to focus on correcting errors step by step.\n",
        "\n",
        "---\n",
        "\n",
        "#### Applications of Gradient Boosting\n",
        "\n",
        "- Fraud detection.\n",
        "- Predicting customer churn.\n",
        "- Forecasting (e.g., sales, stock prices).\n",
        "- Medical diagnosis (e.g., disease risk prediction).\n",
        "\n",
        "---\n",
        "\n",
        "#### Why Use Gradient Boosting?\n",
        "\n",
        "- **Highly Accurate**:\n",
        "  - Gradient Boosting often achieves state-of-the-art performance in many machine learning competitions.\n",
        "- **Handles Complex Data**:\n",
        "  - Can capture complex relationships in the data through iterative refinement.\n",
        "- **Customizable**:\n",
        "  - Allows the use of different loss functions tailored to the problem.\n",
        "\n",
        "---\n",
        "\n",
        "#### Limitations of Gradient Boosting\n",
        "\n",
        "- **Computationally Intensive**:\n",
        "  - Training is slow due to the sequential nature of boosting.\n",
        "- **Sensitive to Hyperparameters**:\n",
        "  - Requires careful tuning of learning rate, number of trees, and tree depth.\n",
        "- **Prone to Overfitting**:\n",
        "  - If not regularized properly, it can overfit, especially with noisy data.\n",
        "- **Requires Expertise**:\n",
        "  - Gradient Boosting models can be complex to implement and tune effectively.\n",
        "\n",
        "---\n",
        "\n",
        "#### Key Hyperparameters\n",
        "\n",
        "1. **Number of Trees (\\( n\\_estimators \\))**:\n",
        "   - Controls the number of boosting iterations.\n",
        "2. **Learning Rate (\\( \\eta \\))**:\n",
        "   - Determines the step size at each iteration.\n",
        "3. **Maximum Depth (\\( \\text{max\\_depth} \\))**:\n",
        "   - Limits the depth of individual trees to avoid overfitting.\n",
        "4. **Subsample**:\n",
        "   - Fraction of data used for each tree, helping with generalization.\n",
        "5. **Regularization Parameters**:\n",
        "   - Techniques like shrinkage, column sampling, and L2 regularization reduce overfitting.\n",
        "\n",
        "---\n",
        "\n",
        "#### Summary\n",
        "\n",
        "Gradient Boosting is a powerful and flexible algorithm that combines the strengths of decision trees with iterative refinement to produce highly accurate models. It is particularly effective for structured data and can be fine-tuned to achieve excellent performance. However, it requires careful hyperparameter tuning and is computationally more demanding than simpler models.\n"
      ],
      "metadata": {
        "id": "jcTwksbJ8_V3"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A7fbqSuC0kPs",
        "outputId": "892dca05-82bf-42b7-d7e6-636234946e6e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "GBM accuracy: 0.96\n"
          ]
        }
      ],
      "source": [
        "gbm = GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, random_state=42)\n",
        "\n",
        "gbm.fit(X_train, y_train)\n",
        "\n",
        "gbm_pred = gbm.predict(X_test)\n",
        "\n",
        "gbm_accuracy = accuracy_score(y_test, gbm_pred)\n",
        "print(f'GBM accuracy: {gbm_accuracy:.2f}')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 7. Comparing Accuracies"
      ],
      "metadata": {
        "id": "yk94Q_It-dPe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model_accuracies = {\n",
        "    'Logistic Regression': log_reg_accuracy,\n",
        "    'k-NN': knn_accuracy,\n",
        "    'SVM': svm_accuracy,\n",
        "    'Decision Tree': tree_accuracy,\n",
        "    'Random Forest': forest_accuracy,\n",
        "    'Gradient Boosting': gbm_accuracy\n",
        "}"
      ],
      "metadata": {
        "id": "8UVRY2dQ2beL"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(model_accuracies.keys(), model_accuracies.values())\n",
        "plt.xlabel('Model')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.title('Comparison of Model Accuracies')\n",
        "plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability\n",
        "plt.tight_layout()\n",
        "plt.ylim(.9)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "eBBueGn_9vUD",
        "outputId": "384fa481-5efe-4929-b8dc-3efa1dd1e354"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 8. Use AutoML"
      ],
      "metadata": {
        "id": "I-QGHn8p-3Bw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install tpot"
      ],
      "metadata": {
        "id": "LPKRDFrkV7Wx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tpot import TPOTClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.datasets import load_breast_cancer\n",
        "\n",
        "\n",
        "tpot = TPOTClassifier(generations=5, population_size = 50, verbosity=2, random_state=42)\n",
        "\n",
        "tpot.fit(X_train, y_train)\n",
        "\n",
        "print(tpot.score(X_test, y_test))\n",
        "\n",
        "# # Export the best pipeline\n",
        "# tpot.export('tpot_breast_cancer_pipeline.py')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 263,
          "referenced_widgets": [
            "eb880d71e8fe4ab1891bcf81f43c9a61",
            "84b9f4fc636f40109c3fc8985dca0d05",
            "94e5f1daf31a489e94750e556f116d5e",
            "ad6728e0879c4d6aa39ddb2cb1600662",
            "a8570a868dbc4cec9d0e96a0db91a922",
            "1b1d6f3e5b4d4fc79580c102d0a4bac0",
            "c8a421d8560f48738f862fd8520d40e7",
            "93d4562ee6c944f7ad8b28e74449008f",
            "a0363bf753e740418a3c752a4a561f79",
            "78785ca8fd534bc1922f8beedf37b441",
            "77aa64804a4f44ef8f2013d89182b250"
          ]
        },
        "id": "4LbRbWZ--_tP",
        "outputId": "75bf7049-ed10-41a6-c545-cae561c44207"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Optimization Progress:   0%|          | 0/300 [00:00<?, ?pipeline/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "eb880d71e8fe4ab1891bcf81f43c9a61"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Generation 1 - Current best internal CV score: 0.9802197802197803\n",
            "\n",
            "Generation 2 - Current best internal CV score: 0.9802197802197803\n",
            "\n",
            "Generation 3 - Current best internal CV score: 0.9802197802197803\n",
            "\n",
            "Generation 4 - Current best internal CV score: 0.9802197802197803\n",
            "\n",
            "Generation 5 - Current best internal CV score: 0.9802197802197803\n",
            "\n",
            "Best pipeline: DecisionTreeClassifier(MLPClassifier(input_matrix, alpha=0.001, learning_rate_init=0.001), criterion=gini, max_depth=3, min_samples_leaf=4, min_samples_split=15)\n",
            "0.9824561403508771\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    },
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "aqomzY3h0pUr",
        "pU_dlRNq0s6V",
        "xrTcycsi02Wx"
      ]
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "eb880d71e8fe4ab1891bcf81f43c9a61": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_84b9f4fc636f40109c3fc8985dca0d05",
              "IPY_MODEL_94e5f1daf31a489e94750e556f116d5e",
              "IPY_MODEL_ad6728e0879c4d6aa39ddb2cb1600662"
            ],
            "layout": "IPY_MODEL_a8570a868dbc4cec9d0e96a0db91a922"
          }
        },
        "84b9f4fc636f40109c3fc8985dca0d05": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1b1d6f3e5b4d4fc79580c102d0a4bac0",
            "placeholder": "​",
            "style": "IPY_MODEL_c8a421d8560f48738f862fd8520d40e7",
            "value": "Optimization Progress: 100%"
          }
        },
        "94e5f1daf31a489e94750e556f116d5e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_93d4562ee6c944f7ad8b28e74449008f",
            "max": 300,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_a0363bf753e740418a3c752a4a561f79",
            "value": 300
          }
        },
        "ad6728e0879c4d6aa39ddb2cb1600662": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_78785ca8fd534bc1922f8beedf37b441",
            "placeholder": "​",
            "style": "IPY_MODEL_77aa64804a4f44ef8f2013d89182b250",
            "value": " 300/300 [05:06&lt;00:00,  1.54s/pipeline]"
          }
        },
        "a8570a868dbc4cec9d0e96a0db91a922": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": "hidden",
            "width": null
          }
        },
        "1b1d6f3e5b4d4fc79580c102d0a4bac0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c8a421d8560f48738f862fd8520d40e7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "93d4562ee6c944f7ad8b28e74449008f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a0363bf753e740418a3c752a4a561f79": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "78785ca8fd534bc1922f8beedf37b441": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "77aa64804a4f44ef8f2013d89182b250": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}